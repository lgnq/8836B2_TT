AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     1


MACRO ASSEMBLER AX51 V3.10
OBJECT MODULE PLACED IN .\output\START390.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.EXE START390.A51 MOD_CONT INCDIR(.\src) SET(LARGE) DEBUG PRINT(.\output\START
                      390.lst) OBJECT(.\output\START390.obj) EP

LOC    OBJ             LINE     SOURCE

                          1     $nomod51 
                          2     ;
                          3     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                          4     ;------------------------------------------------------------------------------
                          5     ;  This file is part of the C51 Compiler package
                          6     ;  Copyright (c) 1988-2005 Keil Elektronik GmbH and Keil Software, Inc.
                          7     ;  Startup code for Dallas 390/5240 CPU, Contiguous Mode
                          8     ;------------------------------------------------------------------------------
                          9     ;  START390.A51:  This code is executed after processor reset.
                         10     ;  You may add this file to a uVision2 project.
                         11     ;
                         12     ;  To translate this file use A51 with the following invocation:
                         13     ;
                         14     ;     AX51 START390.A51 MOD_CONT
                         15     ;
                         16     ;  To link the modified STARTUP.OBJ file to your application use the following
                         17     ;  LX51 invocation:
                         18     ;
                         19     ;     LX51 your object file list, START390.OBJ controls
                         20     ;
                         21     ;------------------------------------------------------------------------------
                         22     ;
                         23     ;<h> Chip Specific Options 
                         24     ;
                         25     ; <q> SA: Use 1KB stack in on-chip XDATA space
                         26     ;    <i> Extend Stack Address Mode Enable (ACON.2)
 0000                    27     SA   EQU 0  ; 0 = 8051 compatible stack in IDATA memory
                         28     ;           ; 1 = Use 1KB stack in on-chip XDATA space
                         29     ;
                         30     ; <h> Memory Control Register (MCON)
                         31     ;
                         32     ;  <o> IDM1..0: Select 4KB on-chip SRAM location (MCON.7..6)
                         33     ;            <0=> XDATA 0x00F000-0x00FFFF
                         34     ;            <1=> XDATA 0x000000-0x000FFF
                         35     ;            <2=> XDATA 0x400000-0x400FFF
                         36     ;            <3=> XDATA and CODE 0x400000-0x400FFF
                         37     ;                 <i> Defines the location and configuration of internal data memory. 
 0000                    38     IDM  EQU 0  ; 0 = 4KB on-chip SRAM location X:0x00F000 - X:0x00FFFF
                         39     ;           ; 1 = 4KB on-chip SRAM location X:0x000000 - X:0x000FFF
                         40     ;           ; 2 = 4KB on-chip SRAM location X:0x400000 - X:0x400FFF
                         41     ;           ; 3 = 4KB on-chip SRAM location X:0x400000 - X:0x400FFF
                         42     ;                 and code memory C:0x400000 - C:0x400FFF
                         43     ;
                         44     ;  <o> CMA: Select CAN XDATA memory location (MCON.5)
                         45     ;            <0=> CAN0=0x00EE00-0x00EEFF, CAN1=0x00EF00-0x00EFFF
                         46     ;            <1=> CAN0=0x401000-0x4010FF, CAN1=0x401100-0x4011FF
                         47     ;                 <i> Defines the location of CAN data memory.
 0000                    48     CMA  EQU 0  ; 0 = CAN0 X:0x00EE00 - X:0x00EEFF, CAN1 X:0x00EF00 - X:0x00EFFF
                         49                 ; 1 = CAN0 X:0x401000 - X:0x4010FF, CAN1 X:0x401100 - X:0x4011FF
                         50     ;
                         51     ; PDCE3 .. PDCE0: Program/Data Chip Enable (MCON.3, MCON.2, MCON.1, MCON.0)
                         52     ; Program/Data Chip Enable selects whether the CEx signal functions as the chip 
                         53     ; enable for external program memory only (PDCE=0), or as a merged chip enable 
                         54     ; for program and data memory (PDCE=1).
                         55     
                         56     ;  <o> PDCE3: Chip Enable signal function (MCON.3)
                         57     ;            <0=> Standard: program memory only
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     2

                         58     ;            <1=> Von Neumann: program and data memory
                         59     ;                 <i> Program/Data Chip Enable selects whether the CE3 signal functions 
                               as the chip 
                         60     ;                 <i> enable for external program memory only (PDCE3=0), or as a merged 
                               chip enable 
                         61     ;                 <i> for program and data memory (PDCE3=1).
 0000                    62     PDCE3 EQU 0 ; PDCE3=0: standard:      RD signal for MOVX
                         63                 ; PDCE3=1: von-Neumann: PSEN signal for MOVX
                         64     ;  <o> PDCE2: Chip Enable signal function (MCON.2)
                         65     ;            <0=> Standard: program memory only
                         66     ;            <1=> Von Neumann: program and data memory
                         67     ;                 <i> Program/Data Chip Enable selects whether the CE2 signal functions 
                               as the chip 
                         68     ;                 <i> enable for external program memory only (PDCE2=0), or as a merged 
                               chip enable 
                         69     ;                 <i> for program and data memory (PDCE2=1).
 0000                    70     PDCE2 EQU 0 ; PDCE2=0: standard:      RD signal for MOVX
                         71                 ; PDCE2=1: von-Neumann: PSEN signal for MOVX
                         72     ;  <o> PDCE1: Chip Enable signal function (MCON.1)
                         73     ;            <0=> Standard: program memory only
                         74     ;            <1=> Von Neumann: program and data memory
                         75     ;                 <i> Program/Data Chip Enable selects whether the CE1 signal functions 
                               as the chip 
                         76     ;                 <i> enable for external program memory only (PDCE1=0), or as a merged 
                               chip enable 
                         77     ;                 <i> for program and data memory (PDCE1=1).
 0000                    78     PDCE1 EQU 0 ; PDCE1=0: standard:      RD signal for MOVX
                         79                 ; PDCE1=1: von-Neumann: PSEN signal for MOVX
                         80     ;  <o> PDCE0: Chip Enable signal function (MCON.0)
                         81     ;            <0=> Standard: program memory only
                         82     ;            <1=> Von Neumann: program and data memory
                         83     ;                 <i> Program/Data Chip Enable selects whether the CE0 signal functions 
                               as the chip 
                         84     ;                 <i> enable for external program memory only (PDCE0=0), or as a merged 
                               chip enable 
                         85     ;                 <i> for program and data memory (PDCE0=1).
 0000                    86     PDCE0 EQU 0 ; PDCE0=0: standard:      RD signal for MOVX
                         87                 ; PDCE0=1: von-Neumann: PSEN signal for MOVX
                         88     ; </h>
                         89     
                         90     ; <h> Port 4 Function Control (P4CNT)
                         91     ; ===============================
                         92     ; Port 4 Pin Function (P4CNT.0 .. P4CNT.2)
                         93     ;  <o> P4PF: Port 4 pin function (P4CNT.0..P4CNT.2)
                         94     ;           <0=> All pins used as I/O pins
                         95     ;           <1=> P4.0=CE0
                         96     ;           <5=> P4.0=CE0, P4.1=CE1
                         97     ;           <6=> P4.0=CE0, P4.1=CE1, P4.2=CE2
                         98     ;           <7=> P4.0=CE0, P4.1=CE1, P4.2=CE2, P4.3=CE3
 0007                    99     P4PF EQU 7  ; 0 : all pins used as I/O pins (P4.0 - P4.3)
                        100     ;           ; 4 : P4.0 is CE0
                        101     ;           ; 5 : P4.0 is CE0, P4.1 is CE1
                        102     ;           ; 6 : P4.0 is CE0, P4.1 is CE1, P4.2 is CE2
                        103     ;           ; 7 : P4.0 is CE0, P4.1 is CE1, P4.2 is CE2, P4.3 is CE3
                        104     ;
                        105     ; Program Memory Chip Enable Window Size (P4CNT.5 .. P4CNT.3)
                        106     ;  <o> PCES: Program memory Chip Enable window size (P4CNT.5..P4CNT.3)
                        107     ;           <0=> 32KB  address window (0-0x7FFF)
                        108     ;           <4=> 128KB address window (0-0x1FFFF)
                        109     ;           <5=> 256KB address window (0-0x3FFFF)
                        110     ;           <6=> 512KB address window (0-0x7FFFF)
                        111     ;           <7=> 1MB   address window (0-0xFFFFF)
 0007                   112     PCES EQU 7  ; 0 = 32KB  address window (0 - 0x7FFF)
                        113     ;           ; 4 = 128KB address window (0 - 0x1FFFF)
                        114     ;           ; 5 = 256KB address window (0 - 0x3FFFF)
                        115     ;           ; 6 = 512KB address window (0 - 0x7FFFF)
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     3

                        116     ;           ; 7 = 1MB   address window (0 - 0xFFFFF)
                        117     ;
                        118     ; Single CAN Configuration (P4CNT.6)
 0000                   119     SBCAN EQU 0 ; 1 = connects both CAN receive inputs and outputs to P5.0 and P5.1
                        120                 ; 0 = both CAN interfaces work on their respective I/O pins
                        121     ; </h>
                        122     
                        123     ; <h> Port 5 Function Control (P5CNT)
                        124     ; ===============================
                        125     ; <o> SP1EC: Serial Port 1 pin routing (P5CNT.5)
                        126     ;            <0=> P1.2/P1.3
                        127     ;            <1=> P5.2/P5.3
                        128     ;                 <i> Serial Port 1 external pin connection routing
 0000                   129     SP1EC EQU 0  ; 0 = Serial Port is routed to P1.2/P1.3
                        130     ;                ; 1 = Serial Port is routed to P5.2/P5.3
                        131     ;
                        132     ; <o> CX_IO: Can I/O enable (P5CNT.3..P5CNT.4)
                        133     ;            <0=> P5.0..P5.3 used as I/O pins
                        134     ;            <1=> P5.2..P5.3 used as I/O pins, P5.0..P5.1 used by CAN0
                        135     ;            <2=> P5.0..P5.1 used as I/O pins, P5.2..P5.3 used by CAN1
                        136     ;            <3=> P5.0..P5.1 used by CAN0, P5.2..P5.3 used by CAN1
 0000                   137     CX_IO EQU 0  ; 0 = P5.0 - P5.3 used as I/O pins
                        138     ;            ; 1 = P5.2 & P5.3 used as I/O pins, P5.0 & P5.1 used by CAN0
                        139     ;            ; 2 = P5.0 & P5.1 used as I/O pins, P5.2 & P5.3 used by CAN1;
                        140     ;            ; 3 = P5.0 & P5.1 used by CAN0, P5.2 & P5.3 used by CAN1;
                        141     ;
                        142     ; <o> P5PF: Port 5 pin function (P5CNT.2..P5CNT.0)
                        143     ;           <0=> All pins used as I/O pins (P4.4,P5.5-P5.7)
                        144     ;           <4=> P4.4=PCE0
                        145     ;           <5=> P4.4=PCE0, P5.5=PCE1
                        146     ;           <6=> P4.4=PCE0, P5.5=PCE1, P5.6=PCE2
                        147     ;           <7=> P4.4=PCE0, P5.5=PCE1, P5.6=PCE2, P5.7=PCE3
 0007                   148     P5PF EQU 7  ; 0 : all pin used as I/O pin (P4.4,P5.5-P5.7)
                        149     ;           ; 4 : P4.4 is PCE0
                        150     ;           ; 5 : P4.4 is PCE0, P5.5 is PCE1
                        151     ;           ; 6 : P4.4 is PCE0, P5.5 is PCE1, P5.6 is PCE2
                        152     ;           ; 7 : P4.4 is PCE0, P5.5 is PCE1, P5.6 is PCE2, P5.7 is PCE3
                        153     ;  </h>
                        154     ; </h>
                        155     ;------------------------------------------------------------------------------
                        156     ;
                        157     ;  User-defined <h> Power-On Initialization of Memory
                        158     ;
                        159     ;  With the following EQU statements the initialization of memory
                        160     ;  at processor reset can be defined:
                        161     ;
                        162     ; <o> IDATALEN: IDATA memory size <0x0-0x100>
                        163     ;     <i> Note: The absolute start address of IDATA memory is always 0
                        164     ;     <i>       The IDATA space physically overlaps the DATA and BIT areas.
 0080                   165     IDATALEN        EQU     80H     ; the length of IDATA memory in bytes.
                        166     ;
                        167     ; <o> XDATASTART: XDATA memory start <0x0-0xFFFF> 
                        168     ;     <i> The absolute start address of XDATA memory.
 0000                   169     XDATASTART      EQU     0H      ; the absolute start-address of XDATA memory
                        170     ; <o> XDATALEN: XDATA memory size <0x0-0xFFFF> 
                        171     ;     <i> The length of XDATA memory in bytes.
 0000                   172     XDATALEN        EQU     0H      ; the length of XDATA memory in bytes.
                        173     ;
                        174     ; <o> PDATASTART: PDATA memory start <0x0-0xFFFF> 
                        175     ;     <i> The absolute start address of PDATA memory.
 0000                   176     PDATASTART      EQU     0H      ; the absolute start-address of PDATA memory
                        177     ; <o> PDATALEN: PDATA memory size <0x0-0xFFFF> 
                        178     ;     <i> The length of PDATA memory in bytes.
 0000                   179     PDATALEN        EQU     0H      ; the length of PDATA memory in bytes.
                        180     ;
                        181     ;  Notes:  The IDATA space overlaps physically the DATA and BIT areas of the
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     4

                        182     ;          8051 CPU. At minimum the memory space occupied from the C51 
                        183     ;          run-time routines must be set to zero.
                        184     ; </h>
                        185     ;------------------------------------------------------------------------------
                        186     ;
                        187     ; <h> Reentrant Stack Initialization
                        188     ;
                        189     ;  The following EQU statements define the stack pointer for reentrant
                        190     ;  functions and initialize it:
                        191     ;
                        192     ;  <h>Stack Space for reentrant functions in the SMALL model.
                        193     ;   <q> IBPSTACK: Enable SMALL model reentrant stack
                        194     ;       <i> Stack space for reentrant functions in the SMALL model.
 0000                   195     IBPSTACK        EQU     0       ; set to 1 if small reentrant is used.
                        196     ;   <o> IBPSTACKTOP: End address of SMALL model stack <0x0-0xFF>
                        197     ;       <i> Set the top of the stack to the highest location.
 0100                   198     IBPSTACKTOP     EQU     0FFH+1  ; set top of stack to highest location+1.
                        199     ; </h>
                        200     ;
                        201     ;  <h>Stack space for reentrant functions in the LARGE model.   
                        202     ;   <q> XBPSTACK: Enable LARGE model reentrant stack
                        203     ;       <i> Stack space for reentrant functions in the LARGE model.
 0000                   204     XBPSTACK        EQU     0       ; set to 1 if large reentrant is used.
                        205     ;   <o> XBPSTACKTOP: End address of LARGE model stack <0x0-0xFFFF>
                        206     ;       <i> Set the top of the stack to the highest location.
 00010000               207     XBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                        208     ; </h>
                        209     ;
                        210     ; <h> Stack space for reentrant functions in the COMPACT model. 
                        211     ;  <q> PBPSTACK: Enable COMPACT model reentrant stack
                        212     ;      <i> Stack space for reentrant functions in the COMPACT model.
 0000                   213     PBPSTACK        EQU     0       ; set to 1 if compact reentrant is used.
                        214     ;  <o> PBPSTACKTOP: End address of COMPACT model stack <0x0-0xFFFF>
                        215     ;      <i> Set the top of the stack to the highest location.
 00010000               216     PBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                        217     ; </h>
                        218     ;</h>
                        219     ;
                        220     ;------------------------------------------------------------------------------
                        221     ;
                        222     ;  Page Definition for Using the Compact Model with 64 KByte xdata RAM
                        223     ; <h> Compact Model Page Definition
                        224     ;   <i> Defines the XDATA page used for PDATA variables.
                        225     ;
                        226     ;  The following EQU statements define the xdata page used for pdata
                        227     ;  variables. The EQU PPAGE must conform with the PPAGE control used
                        228     ;  in the linker invocation.
                        229     ;
                        230     ; <q> PPAGEENABLE: Enable PDATA objects
 0000                   231     PPAGEENABLE     EQU     0       ; set to 1 if pdata objects are used.
                        232     ; <o> PPAGE: XDATA page number <0x0-0xff>
                        233     ;   <i> NOTE: This must agree with the PPAGE control used in the linker.
 0000                   234     PPAGE           EQU     0       ; define PPAGE number.
                        235     ; </h>
                        236     ;
                        237     ;------------------------------------------------------------------------------
                        238     
                        239     ;#include <REG390.H>
                    +1  240     
                    +1  241     
                    +1  242     
                    +1  243     
                    +1  244     
                    +1  245     
                    +1  246     
                    +1  247     
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     5

                    +1  248     
                    +1  249     
                    +1  250     
                    +1  251     
  0080              +1  252     sfr P4     = 0x80;
  0090              +1  253     sfr P1     = 0x90;
  00A0              +1  254     sfr P2     = 0xA0;
  00B0              +1  255     sfr P3     = 0xB0;
  00D0              +1  256     sfr PSW    = 0xD0;
  00E0              +1  257     sfr ACC    = 0xE0;
  00F0              +1  258     sfr B      = 0xF0;
  0081              +1  259     sfr SP     = 0x81;
  0082              +1  260     sfr DPL    = 0x82;
  0083              +1  261     sfr DPH    = 0x83;
  0087              +1  262     sfr PCON   = 0x87;
  0088              +1  263     sfr TCON   = 0x88;
  0089              +1  264     sfr TMOD   = 0x89;
  008A              +1  265     sfr TL0    = 0x8A;
  008B              +1  266     sfr TL1    = 0x8B;
  008C              +1  267     sfr TH0    = 0x8C;
  008D              +1  268     sfr TH1    = 0x8D;
  00A8              +1  269     sfr IE     = 0xA8;
  00B8              +1  270     sfr IP     = 0xB8;
  0098              +1  271     sfr SCON0  = 0x98;
  0099              +1  272     sfr SBUF0  = 0x99;
                    +1  273     
                    +1  274     
  0084              +1  275     sfr DPL1   = 0x84;
  0085              +1  276     sfr DPH1   = 0x85;
  0086              +1  277     sfr DPS    = 0x86;
  008E              +1  278     sfr CKCON  = 0x8E;
  0091              +1  279     sfr EXIF   = 0x91;
  0092              +1  280     sfr P4CNT  = 0x92;
  0093              +1  281     sfr DPX    = 0x93;
  0095              +1  282     sfr DPX1   = 0x95;
  0096              +1  283     sfr C0RMS0 = 0x96;
  0097              +1  284     sfr C0RMS1 = 0x97;
  009B              +1  285     sfr ESP    = 0x9B;
  009C              +1  286     sfr AP     = 0x9C;
  009D              +1  287     sfr ACON   = 0x9D;
  009E              +1  288     sfr C0TMA0 = 0x9E;
  009F              +1  289     sfr C0TMA1 = 0x9F;
  00A1              +1  290     sfr P5     = 0xA1;
  00A2              +1  291     sfr P5CNT  = 0xA2;
  00A3              +1  292     sfr C0C    = 0xA3;
  00A4              +1  293     sfr C0S    = 0xA4;
  00A5              +1  294     sfr C0IR   = 0xA5;
  00A6              +1  295     sfr C0TE   = 0xA6;
  00A7              +1  296     sfr C0RE   = 0xA7;
  00A9              +1  297     sfr SADDR0 = 0xA9;
  00AA              +1  298     sfr SADDR1 = 0xAA;
  00AB              +1  299     sfr C0M1C  = 0xAB;
  00AC              +1  300     sfr C0M2C  = 0xAC;
  00AD              +1  301     sfr C0M3C  = 0xAD;
  00AE              +1  302     sfr C0M4C  = 0xAE;
  00AF              +1  303     sfr C0M5C  = 0xAF;
  00B3              +1  304     sfr C0M6C  = 0xB3;
  00B4              +1  305     sfr C0M7C  = 0xB4;
  00B5              +1  306     sfr C0M8C  = 0xB5;
  00B6              +1  307     sfr C0M9C  = 0xB6;
  00B7              +1  308     sfr C0M10C = 0xB7;
  00B9              +1  309     sfr SADEN0 = 0xB9;
  00BA              +1  310     sfr SADEN1 = 0xBA;
  00BB              +1  311     sfr C0M11C = 0xBB;
  00BC              +1  312     sfr C0M12C = 0xBC;
  00BD              +1  313     sfr C0M13C = 0xBD;
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     6

  00BE              +1  314     sfr C0M14C = 0xBE;
  00BF              +1  315     sfr C0M15C = 0xBF;
  00C0              +1  316     sfr SCON1  = 0xC0;
  00C1              +1  317     sfr SBUF1  = 0xC1;
  00C4              +1  318     sfr PMR    = 0xC4;
  00C5              +1  319     sfr STATUS = 0xC5;
  00C6              +1  320     sfr MCON   = 0xC6;
  00C7              +1  321     sfr TA     = 0xC7;
  00C8              +1  322     sfr T2CON  = 0xC8;
  00C9              +1  323     sfr T2MOD  = 0xC9;
  00CA              +1  324     sfr RCAP2L = 0xCA;
  00CB              +1  325     sfr RCAP2H = 0xCB;
  00CC              +1  326     sfr TL2    = 0xCC;
  00CD              +1  327     sfr TH2    = 0xCD;
  00CE              +1  328     sfr COR    = 0xCE;
  00D1              +1  329     sfr MCNT0  = 0xD1;
  00D2              +1  330     sfr MCNT1  = 0xD2;
  00D3              +1  331     sfr MA     = 0xD3;
  00D4              +1  332     sfr MB     = 0xD4;
  00D5              +1  333     sfr MC     = 0xD5;
  00D6              +1  334     sfr C1RMS0 = 0xD6;
  00D7              +1  335     sfr C1RMS1 = 0xD7;
  00D8              +1  336     sfr WDCON  = 0xD8;
  00DE              +1  337     sfr C1TMA0 = 0xDE;
  00DF              +1  338     sfr C1TMA1 = 0xDF;
  00E3              +1  339     sfr C1C    = 0xE3;
  00E4              +1  340     sfr C1S    = 0xE4;
  00E5              +1  341     sfr C1IR   = 0xE5;
  00E6              +1  342     sfr C1TE   = 0xE6;
  00E7              +1  343     sfr C1RE   = 0xE7;
  00E8              +1  344     sfr EIE    = 0xE8;
  00EA              +1  345     sfr MXAX   = 0xEA;
  00EB              +1  346     sfr C1M1C  = 0xEB;
  00EC              +1  347     sfr C1M2C  = 0xEC;
  00ED              +1  348     sfr C1M3C  = 0xED;
  00EE              +1  349     sfr C1M4C  = 0xEE;
  00EF              +1  350     sfr C1M5C  = 0xEF;
  00F3              +1  351     sfr C1M6C  = 0xF3;
  00F4              +1  352     sfr C1M7C  = 0xF4;
  00F5              +1  353     sfr C1M8C  = 0xF5;
  00F6              +1  354     sfr C1M9C  = 0xF6;
  00F7              +1  355     sfr C1M10C = 0xF7;
  00F8              +1  356     sfr EIP    = 0xF8;
  00FB              +1  357     sfr C1M11C = 0xFB;
  00FC              +1  358     sfr C1M12C = 0xFC;
  00FD              +1  359     sfr C1M13C = 0xFD;
  00FE              +1  360     sfr C1M14C = 0xFE;
  00FF              +1  361     sfr C1M15C = 0xFF;
                    +1  362     
                    +1  363     
                    +1  364     
0080.7              +1  365     sbit P4_7  = P4^7;
0080.6              +1  366     sbit P4_6  = P4^6;
0080.5              +1  367     sbit P4_5  = P4^5;
0080.4              +1  368     sbit P4_4  = P4^4;
0080.3              +1  369     sbit P4_3  = P4^3;
0080.2              +1  370     sbit P4_2  = P4^2;
0080.1              +1  371     sbit P4_1  = P4^1;
0080.0              +1  372     sbit P4_0  = P4^0;
                    +1  373     
0090.7              +1  374     sbit P1_7  = P1^7;
0090.6              +1  375     sbit P1_6  = P1^6;
0090.5              +1  376     sbit P1_5  = P1^5;
0090.4              +1  377     sbit P1_4  = P1^4;
0090.3              +1  378     sbit P1_3  = P1^3;
0090.2              +1  379     sbit P1_2  = P1^2;
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     7

0090.1              +1  380     sbit P1_1  = P1^1;
0090.0              +1  381     sbit P1_0  = P1^0;
                    +1  382     
00A0.7              +1  383     sbit P2_7  = P2^7;
00A0.6              +1  384     sbit P2_6  = P2^6;
00A0.5              +1  385     sbit P2_5  = P2^5;
00A0.4              +1  386     sbit P2_4  = P2^4;
00A0.3              +1  387     sbit P2_3  = P2^3;
00A0.2              +1  388     sbit P2_2  = P2^2;
00A0.1              +1  389     sbit P2_1  = P2^1;
00A0.0              +1  390     sbit P2_0  = P2^0;
                    +1  391     
00B0.7              +1  392     sbit P3_7  = P3^7;
00B0.6              +1  393     sbit P3_6  = P3^6;
00B0.5              +1  394     sbit P3_5  = P3^5;
00B0.4              +1  395     sbit P3_4  = P3^4;
00B0.3              +1  396     sbit P3_3  = P3^3;
00B0.2              +1  397     sbit P3_2  = P3^2;
00B0.1              +1  398     sbit P3_1  = P3^1;
00B0.0              +1  399     sbit P3_0  = P3^0;
                    +1  400     
00D0.7              +1  401     sbit CY    = PSW^7;
00D0.6              +1  402     sbit AC    = PSW^6;
00D0.5              +1  403     sbit F0    = PSW^5;
00D0.4              +1  404     sbit RS1   = PSW^4;
00D0.3              +1  405     sbit RS0   = PSW^3;
00D0.2              +1  406     sbit OV    = PSW^2;
00D0.1              +1  407     sbit F1    = PSW^1;
00D0.0              +1  408     sbit P     = PSW^0;
                    +1  409     
0088.7              +1  410     sbit TF1   = TCON^7;
0088.6              +1  411     sbit TR1   = TCON^6;
0088.5              +1  412     sbit TF0   = TCON^5;
0088.4              +1  413     sbit TR0   = TCON^4;
0088.3              +1  414     sbit IE1   = TCON^3;
0088.2              +1  415     sbit IT1   = TCON^2;
0088.1              +1  416     sbit IE0   = TCON^1;
0088.0              +1  417     sbit IT0   = TCON^0;
                    +1  418     
00A8.7              +1  419     sbit EA    = IE^7;
00A8.6              +1  420     sbit ES1   = IE^6;
00A8.5              +1  421     sbit ET2   = IE^5;
00A8.4              +1  422     sbit ES0   = IE^4;
00A8.3              +1  423     sbit ET1   = IE^3;
00A8.2              +1  424     sbit EX1   = IE^2;
00A8.1              +1  425     sbit ET0   = IE^1;
00A8.0              +1  426     sbit EX0   = IE^0;
                    +1  427     
00B8.6              +1  428     sbit PS1   = IP^6;
00B8.5              +1  429     sbit PT2   = IP^5;
00B8.4              +1  430     sbit PS0   = IP^4;
00B8.3              +1  431     sbit PT1   = IP^3;
00B8.2              +1  432     sbit PX1   = IP^2;
00B8.1              +1  433     sbit PT0   = IP^1;
00B8.0              +1  434     sbit PX0   = IP^0;
                    +1  435     
0098.7              +1  436     sbit SM0   = SCON0^7; /* Alternate SM0_FE_0 */
0098.6              +1  437     sbit SM1   = SCON0^6; /* Alternate SM1_0 */
0098.5              +1  438     sbit SM2   = SCON0^5; /* Alternate SM2_0 */
0098.4              +1  439     sbit REN   = SCON0^4; /* Alternate REN_0 */
0098.3              +1  440     sbit TB8   = SCON0^3; /* Alternate TB8_0 */
0098.2              +1  441     sbit RB8   = SCON0^2; /* Alternate RB8_0 */
0098.1              +1  442     sbit TI    = SCON0^1; /* Alternate TI_0  */
0098.0              +1  443     sbit RI    = SCON0^0; /* Alternate RI_0  */
                    +1  444     
00C0.7              +1  445     sbit SM01  = SCON1^7; /* Alternate SM0_FE_1 */
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     8

00C0.6              +1  446     sbit SM11  = SCON1^6; /* Alternate SM1_1 */
00C0.5              +1  447     sbit SM21  = SCON1^5; /* Alternate SM2_1 */
00C0.4              +1  448     sbit REN1  = SCON1^4; /* Alternate REN_1 */
00C0.3              +1  449     sbit TB81  = SCON1^3; /* Alternate TB8_1 */
00C0.2              +1  450     sbit RB81  = SCON1^2; /* Alternate RB8_1 */
00C0.1              +1  451     sbit TI1   = SCON1^1; /* Alternate TI_1  */
00C0.0              +1  452     sbit RI1   = SCON1^0; /* Alternate RI_1  */
                    +1  453     
00C8.7              +1  454     sbit TF2   = T2CON^7;
00C8.6              +1  455     sbit EXF2  = T2CON^6;
00C8.5              +1  456     sbit RCLK  = T2CON^5;
00C8.4              +1  457     sbit TCLK  = T2CON^4;
00C8.3              +1  458     sbit EXEN2 = T2CON^3;
00C8.2              +1  459     sbit TR2   = T2CON^2;
00C8.1              +1  460     sbit C_T2  = T2CON^1;
00C8.0              +1  461     sbit CP_RL2= T2CON^0;
                    +1  462     
00D8.7              +1  463     sbit SMOD_1= WDCON^7;
00D8.6              +1  464     sbit POR   = WDCON^6;
00D8.5              +1  465     sbit EPF1  = WDCON^5;
00D8.4              +1  466     sbit PF1   = WDCON^4;
00D8.3              +1  467     sbit WDIF  = WDCON^3;
00D8.2              +1  468     sbit WTRF  = WDCON^2;
00D8.1              +1  469     sbit EWT   = WDCON^1;
00D8.0              +1  470     sbit RWT   = WDCON^0;
                    +1  471     
00E8.7              +1  472     sbit CANBIE= EIE^7;
00E8.6              +1  473     sbit C0IE  = EIE^6;
00E8.5              +1  474     sbit C1IE  = EIE^5;
00E8.4              +1  475     sbit EWDI  = EIE^4;
00E8.3              +1  476     sbit EX5   = EIE^3; /* Alternate EC3 */
00E8.2              +1  477     sbit EX4   = EIE^2; /* Alternate EC2 */
00E8.1              +1  478     sbit EX3   = EIE^1; /* Alternate EC1 */
00E8.0              +1  479     sbit EX2   = EIE^0; /* Alternate EC0 */
                    +1  480     
00F8.7              +1  481     sbit CANBIP= EIP^7;
00F8.6              +1  482     sbit C0IP  = EIP^6;
00F8.5              +1  483     sbit C1IP  = EIP^5;
00F8.4              +1  484     sbit PWDI  = EIP^4;
00F8.3              +1  485     sbit PX5   = EIP^3; /* Alternate PC3 */
00F8.2              +1  486     sbit PX4   = EIP^2; /* Alternate PC2 */
00F8.1              +1  487     sbit PX3   = EIP^1; /* Alternate PC1 */
00F8.0              +1  488     sbit PX2   = EIP^0; /* Alternate PC0 */
                    +1  489     
                    +1  490     
                        491     
                        492     
                        493                     NAME    ?C_STARTUP
                        494     
                        495     
------                  496     ?C_C51STARTUP   SEGMENT   CODE
                        497     
                        498     IF SA = 1
                                  IF IDM = 0
                                    
                                    ?STACK SEGMENT XDATA AT 0F000H
                                  ENDIF
                                
                                  IF IDM = 1
                                    ?STACK SEGMENT XDATA AT 00000H
                                  ENDIF
                                
                                  IF IDM = 2
                                    ?STACK SEGMENT HDATA AT 0400000H
                                  ENDIF
                                
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE     9

                                  IF IDM = 3
                                    __ERROR__ "Extended Stack not possible when on-chip XRAM is mapped as code & xdata"
                                  ENDIF
                                
                                                RSEG    ?STACK
                                                DS      1024
                                ELSE
                        519     
------                  520     ?STACK          SEGMENT   IDATA
                        521     
------                  522                     RSEG    ?STACK
000000                  523                     DS      1
                        524     ENDIF
                        525     
                        526                     EXTRN CODE (?C_START)
                        527                     PUBLIC  ?C_STARTUP
                        528     
000000                  529     ?C_CPURESET?0   SEGMENT CODE OFFS 0
------                  530                     RSEG    ?C_CPURESET?0   
                        531     
000000                  532     ?C_STARTUP      LABEL   NEAR
000000 02               533                     DB      02H     ; LJMP in Classic 8051 Mode
000001 0000       F     534                     DW      WORD0 STARTUP1
------                  535                     RSEG    ?C_C51STARTUP
                        536     
000000                  537     STARTUP1:      
                        538                     
000000 75C7AA           539                     MOV     TA,#0xAA        ; Enable access to P4CNT
000003 75C755           540                     MOV     TA,#0x55       
 003F                   541     P4CNT_VAL EQU (SBCAN SHL 6) OR (PCES SHL 3) OR (P4PF)
000006 75923F           542                     MOV     P4CNT,#P4CNT_VAL
                        543     
000009 75C7AA           544                     MOV     TA,#0xAA        ; Enable access to P5CNT
00000C 75C755           545                     MOV     TA,#0x55       
 0007                   546     P5CNT_VAL EQU (SP1EC SHL 5) OR (CX_IO SHL 3) OR (P5PF)
00000F 75A207           547                     MOV     P5CNT,#P5CNT_VAL                      
                        548     
                        549     
                        550     
000012 75C7AA           551                     MOV     TA,#0xAA        ; Enable access to ACON
000015 75C755           552                     MOV     TA,#0x55
 0002                   553     ACON_VAL EQU (2 OR (SA SHL 2)) ; 22-bit contigious mode, SA bit
000018 759D02           554                     MOV     ACON,#ACON_VAL
                        555     
00001B 75C7AA           556                     MOV     TA,#0xAA        ; Enable access to MCON
00001E 75C755           557                     MOV     TA,#0x55
 0000                   558     MCON_VAL SET (IDM SHL 6) OR (CMA SHL 5) OR (PDCE3 SHL 3) OR (PDCE2 SHL 2)
 0000                   559     MCON_VAL SET MCON_VAL OR (PDCE1 SHL 1) OR (PDCE0)
000021 75C600           560                     MOV     MCON,#MCON_VAL
                        561     
                        562     
                        563     IF IDATALEN <> 0
000024 787F             564                     MOV     R0,#IDATALEN - 1
000026 E4               565                     CLR     A
000027 F6               566     IDATALOOP:      MOV     @R0,A
000028 D8FD             567                     DJNZ    R0,IDATALOOP
                        568     ENDIF
                        569     
                        570     IF XDATALEN <> 0
                                                MOV     DPTR,#XDATASTART
                                                MOV     R7,#BYTE0 (XDATALEN)
                                  IF (BYTE0 (XDATALEN)) <> 0
                                                MOV     R6,#(BYTE1 XDATALEN) +1
                                  ELSE
                                                MOV     R6,#BYTE1 (XDATALEN)
                                  ENDIF
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE    10

                                  IF (BYTE1 (XDATALEN)) <> 0
                                                MOV     R5,#(BYTE2 XDATALEN) +1
                                  ELSE
                                                MOV     R5,#BYTE2 (XDATALEN)
                                  ENDIF
                                                CLR     A
                                XDATALOOP:      MOVX    @DPTR,A
                                                INC     DPTR
                                                DJNZ    R7,XDATALOOP
                                                DJNZ    R6,XDATALOOP
                                                DJNZ    R5,XDATALOOP
                                ENDIF
                        590     
                        591     IF PPAGEENABLE <> 0
                                                MOV     P2,#PPAGE
                                                MOV     MXAX,#0
                                ENDIF
                        595     
                        596     IF PDATALEN <> 0
                                                MOV     R0,#PDATASTART
                                                MOV     R7,#LOW (PDATALEN)
                                                CLR     A
                                PDATALOOP:      MOVX    @R0,A
                                                INC     R0
                                                DJNZ    R7,PDATALOOP
                                ENDIF
                        604     
                        605     IF IBPSTACK <> 0
                                EXTRN DATA (?C_IBP)
                                
                                                MOV     ?C_IBP,#LOW IBPSTACKTOP
                                ENDIF
                        610     
                        611     IF XBPSTACK <> 0
                                EXTRN DATA (?C_XBP)
                                
                                                MOV     ?C_XBP,#HIGH XBPSTACKTOP
                                                MOV     ?C_XBP+1,#LOW XBPSTACKTOP
                                ENDIF
                        617     
                        618     IF PBPSTACK <> 0
                                EXTRN DATA (?C_PBP)
                                                MOV     ?C_PBP,#LOW PBPSTACKTOP
                                ENDIF
                        622     
                        623     IF SA = 1
                                                MOV     SP,#BYTE0 (?STACK-1)
                                                MOV     ESP,#BYTE1 (?STACK-1)
                                ELSE
00002A 758100     F     627                     MOV     SP,#?STACK-1
                        628     ENDIF
00002D 02000000   E     629                     LJMP    ?C_START
                        630     
                        631                     END
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE    11

SYMBOL TABLE LISTING
------ ----- -------


N A M E                        T Y P E  V A L U E     ATTRIBUTES

?C_C51STARTUP . . . . . . . .  C  SEG   000031H       REL=UNIT, ALN=BYTE
?C_CPURESET?0 . . . . . . . .  C  SEG   000003H       REL=OFS, ALN=BYTE
?C_START. . . . . . . . . . .  C  ADDR  -------       EXT
?C_STARTUP. . . . . . . . . .  C  ADDR  0000H     R   SEG=?C_CPURESET?0
?STACK. . . . . . . . . . . .  I  SEG   000001H       REL=UNIT, ALN=BYTE
AC. . . . . . . . . . . . . .  B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . .  D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . .  D  ADDR  009DH     A   
ACON_VAL. . . . . . . . . . .  N  NUMB  0002H     A   
AP. . . . . . . . . . . . . .  D  ADDR  009CH     A   
B . . . . . . . . . . . . . .  D  ADDR  00F0H     A   
C0C . . . . . . . . . . . . .  D  ADDR  00A3H     A   
C0IE. . . . . . . . . . . . .  B  ADDR  00E8H.6   A   
C0IP. . . . . . . . . . . . .  B  ADDR  00F8H.6   A   
C0IR. . . . . . . . . . . . .  D  ADDR  00A5H     A   
C0M10C. . . . . . . . . . . .  D  ADDR  00B7H     A   
C0M11C. . . . . . . . . . . .  D  ADDR  00BBH     A   
C0M12C. . . . . . . . . . . .  D  ADDR  00BCH     A   
C0M13C. . . . . . . . . . . .  D  ADDR  00BDH     A   
C0M14C. . . . . . . . . . . .  D  ADDR  00BEH     A   
C0M15C. . . . . . . . . . . .  D  ADDR  00BFH     A   
C0M1C . . . . . . . . . . . .  D  ADDR  00ABH     A   
C0M2C . . . . . . . . . . . .  D  ADDR  00ACH     A   
C0M3C . . . . . . . . . . . .  D  ADDR  00ADH     A   
C0M4C . . . . . . . . . . . .  D  ADDR  00AEH     A   
C0M5C . . . . . . . . . . . .  D  ADDR  00AFH     A   
C0M6C . . . . . . . . . . . .  D  ADDR  00B3H     A   
C0M7C . . . . . . . . . . . .  D  ADDR  00B4H     A   
C0M8C . . . . . . . . . . . .  D  ADDR  00B5H     A   
C0M9C . . . . . . . . . . . .  D  ADDR  00B6H     A   
C0RE. . . . . . . . . . . . .  D  ADDR  00A7H     A   
C0RMS0. . . . . . . . . . . .  D  ADDR  0096H     A   
C0RMS1. . . . . . . . . . . .  D  ADDR  0097H     A   
C0S . . . . . . . . . . . . .  D  ADDR  00A4H     A   
C0TE. . . . . . . . . . . . .  D  ADDR  00A6H     A   
C0TMA0. . . . . . . . . . . .  D  ADDR  009EH     A   
C0TMA1. . . . . . . . . . . .  D  ADDR  009FH     A   
C1C . . . . . . . . . . . . .  D  ADDR  00E3H     A   
C1IE. . . . . . . . . . . . .  B  ADDR  00E8H.5   A   
C1IP. . . . . . . . . . . . .  B  ADDR  00F8H.5   A   
C1IR. . . . . . . . . . . . .  D  ADDR  00E5H     A   
C1M10C. . . . . . . . . . . .  D  ADDR  00F7H     A   
C1M11C. . . . . . . . . . . .  D  ADDR  00FBH     A   
C1M12C. . . . . . . . . . . .  D  ADDR  00FCH     A   
C1M13C. . . . . . . . . . . .  D  ADDR  00FDH     A   
C1M14C. . . . . . . . . . . .  D  ADDR  00FEH     A   
C1M15C. . . . . . . . . . . .  D  ADDR  00FFH     A   
C1M1C . . . . . . . . . . . .  D  ADDR  00EBH     A   
C1M2C . . . . . . . . . . . .  D  ADDR  00ECH     A   
C1M3C . . . . . . . . . . . .  D  ADDR  00EDH     A   
C1M4C . . . . . . . . . . . .  D  ADDR  00EEH     A   
C1M5C . . . . . . . . . . . .  D  ADDR  00EFH     A   
C1M6C . . . . . . . . . . . .  D  ADDR  00F3H     A   
C1M7C . . . . . . . . . . . .  D  ADDR  00F4H     A   
C1M8C . . . . . . . . . . . .  D  ADDR  00F5H     A   
C1M9C . . . . . . . . . . . .  D  ADDR  00F6H     A   
C1RE. . . . . . . . . . . . .  D  ADDR  00E7H     A   
C1RMS0. . . . . . . . . . . .  D  ADDR  00D6H     A   
C1RMS1. . . . . . . . . . . .  D  ADDR  00D7H     A   
C1S . . . . . . . . . . . . .  D  ADDR  00E4H     A   
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE    12

C1TE. . . . . . . . . . . . .  D  ADDR  00E6H     A   
C1TMA0. . . . . . . . . . . .  D  ADDR  00DEH     A   
C1TMA1. . . . . . . . . . . .  D  ADDR  00DFH     A   
C_T2. . . . . . . . . . . . .  B  ADDR  00C8H.1   A   
CANBIE. . . . . . . . . . . .  B  ADDR  00E8H.7   A   
CANBIP. . . . . . . . . . . .  B  ADDR  00F8H.7   A   
CKCON . . . . . . . . . . . .  D  ADDR  008EH     A   
CMA . . . . . . . . . . . . .  N  NUMB  0000H     A   
COR . . . . . . . . . . . . .  D  ADDR  00CEH     A   
CP_RL2. . . . . . . . . . . .  B  ADDR  00C8H.0   A   
CX_IO . . . . . . . . . . . .  N  NUMB  0000H     A   
CY. . . . . . . . . . . . . .  B  ADDR  00D0H.7   A   
DPH . . . . . . . . . . . . .  D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . .  D  ADDR  0085H     A   
DPL . . . . . . . . . . . . .  D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . .  D  ADDR  0084H     A   
DPS . . . . . . . . . . . . .  D  ADDR  0086H     A   
DPX . . . . . . . . . . . . .  D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . .  D  ADDR  0095H     A   
EA. . . . . . . . . . . . . .  B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . .  D  ADDR  00E8H     A   
EIP . . . . . . . . . . . . .  D  ADDR  00F8H     A   
EPF1. . . . . . . . . . . . .  B  ADDR  00D8H.5   A   
ES0 . . . . . . . . . . . . .  B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . .  B  ADDR  00A8H.6   A   
ESP . . . . . . . . . . . . .  D  ADDR  009BH     A   
ET0 . . . . . . . . . . . . .  B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . .  B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . .  B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . .  B  ADDR  00E8H.4   A   
EWT . . . . . . . . . . . . .  B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . .  B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . .  B  ADDR  00A8H.2   A   
EX2 . . . . . . . . . . . . .  B  ADDR  00E8H.0   A   
EX3 . . . . . . . . . . . . .  B  ADDR  00E8H.1   A   
EX4 . . . . . . . . . . . . .  B  ADDR  00E8H.2   A   
EX5 . . . . . . . . . . . . .  B  ADDR  00E8H.3   A   
EXEN2 . . . . . . . . . . . .  B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . .  B  ADDR  00C8H.6   A   
EXIF. . . . . . . . . . . . .  D  ADDR  0091H     A   
F0. . . . . . . . . . . . . .  B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . .  B  ADDR  00D0H.1   A   
IBPSTACK. . . . . . . . . . .  N  NUMB  0000H     A   
IBPSTACKTOP . . . . . . . . .  N  NUMB  0100H     A   
IDATALEN. . . . . . . . . . .  N  NUMB  0080H     A   
IDATALOOP . . . . . . . . . .  C  ADDR  0027H     R   SEG=?C_C51STARTUP
IDM . . . . . . . . . . . . .  N  NUMB  0000H     A   
IE. . . . . . . . . . . . . .  D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . .  B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . .  B  ADDR  0088H.3   A   
IP. . . . . . . . . . . . . .  D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . .  B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . .  B  ADDR  0088H.2   A   
MA. . . . . . . . . . . . . .  D  ADDR  00D3H     A   
MB. . . . . . . . . . . . . .  D  ADDR  00D4H     A   
MC. . . . . . . . . . . . . .  D  ADDR  00D5H     A   
MCNT0 . . . . . . . . . . . .  D  ADDR  00D1H     A   
MCNT1 . . . . . . . . . . . .  D  ADDR  00D2H     A   
MCON. . . . . . . . . . . . .  D  ADDR  00C6H     A   
MCON_VAL. . . . . . . . . . .  N  NUMB  0000H     A   
MXAX. . . . . . . . . . . . .  D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . .  B  ADDR  00D0H.2   A   
P . . . . . . . . . . . . . .  B  ADDR  00D0H.0   A   
P1. . . . . . . . . . . . . .  D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . .  B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . .  B  ADDR  0090H.1   A   
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE    13

P1_2. . . . . . . . . . . . .  B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . .  B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . .  B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . .  B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . .  B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . .  B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . .  D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . .  B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . .  B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . .  B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . .  B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . .  B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . .  B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . .  B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . .  B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . .  D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . .  B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . .  B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . .  B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . .  B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . .  B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . .  B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . .  B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . .  B  ADDR  00B0H.7   A   
P4. . . . . . . . . . . . . .  D  ADDR  0080H     A   
P4_0. . . . . . . . . . . . .  B  ADDR  0080H.0   A   
P4_1. . . . . . . . . . . . .  B  ADDR  0080H.1   A   
P4_2. . . . . . . . . . . . .  B  ADDR  0080H.2   A   
P4_3. . . . . . . . . . . . .  B  ADDR  0080H.3   A   
P4_4. . . . . . . . . . . . .  B  ADDR  0080H.4   A   
P4_5. . . . . . . . . . . . .  B  ADDR  0080H.5   A   
P4_6. . . . . . . . . . . . .  B  ADDR  0080H.6   A   
P4_7. . . . . . . . . . . . .  B  ADDR  0080H.7   A   
P4CNT . . . . . . . . . . . .  D  ADDR  0092H     A   
P4CNT_VAL . . . . . . . . . .  N  NUMB  003FH     A   
P4PF. . . . . . . . . . . . .  N  NUMB  0007H     A   
P5. . . . . . . . . . . . . .  D  ADDR  00A1H     A   
P5CNT . . . . . . . . . . . .  D  ADDR  00A2H     A   
P5CNT_VAL . . . . . . . . . .  N  NUMB  0007H     A   
P5PF. . . . . . . . . . . . .  N  NUMB  0007H     A   
PBPSTACK. . . . . . . . . . .  N  NUMB  0000H     A   
PBPSTACKTOP . . . . . . . . .  N  NUMB  00010000H A   
PCES. . . . . . . . . . . . .  N  NUMB  0007H     A   
PCON. . . . . . . . . . . . .  D  ADDR  0087H     A   
PDATALEN. . . . . . . . . . .  N  NUMB  0000H     A   
PDATASTART. . . . . . . . . .  N  NUMB  0000H     A   
PDCE0 . . . . . . . . . . . .  N  NUMB  0000H     A   
PDCE1 . . . . . . . . . . . .  N  NUMB  0000H     A   
PDCE2 . . . . . . . . . . . .  N  NUMB  0000H     A   
PDCE3 . . . . . . . . . . . .  N  NUMB  0000H     A   
PF1 . . . . . . . . . . . . .  B  ADDR  00D8H.4   A   
PMR . . . . . . . . . . . . .  D  ADDR  00C4H     A   
POR . . . . . . . . . . . . .  B  ADDR  00D8H.6   A   
PPAGE . . . . . . . . . . . .  N  NUMB  0000H     A   
PPAGEENABLE . . . . . . . . .  N  NUMB  0000H     A   
PS0 . . . . . . . . . . . . .  B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . .  B  ADDR  00B8H.6   A   
PSW . . . . . . . . . . . . .  D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . .  B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . .  B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . .  B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . .  B  ADDR  00F8H.4   A   
PX0 . . . . . . . . . . . . .  B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . .  B  ADDR  00B8H.2   A   
PX2 . . . . . . . . . . . . .  B  ADDR  00F8H.0   A   
PX3 . . . . . . . . . . . . .  B  ADDR  00F8H.1   A   
AX51 MACRO ASSEMBLER  START390                                                              07/10/16 16:38:38 PAGE    14

PX4 . . . . . . . . . . . . .  B  ADDR  00F8H.2   A   
PX5 . . . . . . . . . . . . .  B  ADDR  00F8H.3   A   
RB8 . . . . . . . . . . . . .  B  ADDR  0098H.2   A   
RB81. . . . . . . . . . . . .  B  ADDR  00C0H.2   A   
RCAP2H. . . . . . . . . . . .  D  ADDR  00CBH     A   
RCAP2L. . . . . . . . . . . .  D  ADDR  00CAH     A   
RCLK. . . . . . . . . . . . .  B  ADDR  00C8H.5   A   
REN . . . . . . . . . . . . .  B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . .  B  ADDR  00C0H.4   A   
RI. . . . . . . . . . . . . .  B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . .  B  ADDR  00C0H.0   A   
RS0 . . . . . . . . . . . . .  B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . .  B  ADDR  00D0H.4   A   
RWT . . . . . . . . . . . . .  B  ADDR  00D8H.0   A   
SA. . . . . . . . . . . . . .  N  NUMB  0000H     A   
SADDR0. . . . . . . . . . . .  D  ADDR  00A9H     A   
SADDR1. . . . . . . . . . . .  D  ADDR  00AAH     A   
SADEN0. . . . . . . . . . . .  D  ADDR  00B9H     A   
SADEN1. . . . . . . . . . . .  D  ADDR  00BAH     A   
SBCAN . . . . . . . . . . . .  N  NUMB  0000H     A   
SBUF0 . . . . . . . . . . . .  D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . .  D  ADDR  00C1H     A   
SCON0 . . . . . . . . . . . .  D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . .  D  ADDR  00C0H     A   
SM0 . . . . . . . . . . . . .  B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . .  B  ADDR  00C0H.7   A   
SM1 . . . . . . . . . . . . .  B  ADDR  0098H.6   A   
SM11. . . . . . . . . . . . .  B  ADDR  00C0H.6   A   
SM2 . . . . . . . . . . . . .  B  ADDR  0098H.5   A   
SM21. . . . . . . . . . . . .  B  ADDR  00C0H.5   A   
SMOD_1. . . . . . . . . . . .  B  ADDR  00D8H.7   A   
SP. . . . . . . . . . . . . .  D  ADDR  0081H     A   
SP1EC . . . . . . . . . . . .  N  NUMB  0000H     A   
STARTUP1. . . . . . . . . . .  C  ADDR  0000H     R   SEG=?C_C51STARTUP
STATUS. . . . . . . . . . . .  D  ADDR  00C5H     A   
T2CON . . . . . . . . . . . .  D  ADDR  00C8H     A   
T2MOD . . . . . . . . . . . .  D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . .  D  ADDR  00C7H     A   
TB8 . . . . . . . . . . . . .  B  ADDR  0098H.3   A   
TB81. . . . . . . . . . . . .  B  ADDR  00C0H.3   A   
TCLK. . . . . . . . . . . . .  B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . .  D  ADDR  0088H     A   
TF0 . . . . . . . . . . . . .  B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . .  B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . .  B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . .  D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . .  D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . .  D  ADDR  00CDH     A   
TI. . . . . . . . . . . . . .  B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . .  B  ADDR  00C0H.1   A   
TL0 . . . . . . . . . . . . .  D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . .  D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . .  D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . .  D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . .  B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . .  B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . .  B  ADDR  00C8H.2   A   
WDCON . . . . . . . . . . . .  D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . .  B  ADDR  00D8H.3   A   
WTRF. . . . . . . . . . . . .  B  ADDR  00D8H.2   A   
XBPSTACK. . . . . . . . . . .  N  NUMB  0000H     A   
XBPSTACKTOP . . . . . . . . .  N  NUMB  00010000H A   
XDATALEN. . . . . . . . . . .  N  NUMB  0000H     A   
XDATASTART. . . . . . . . . .  N  NUMB  0000H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
